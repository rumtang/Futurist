# Cloud Build config for WebSocket-enabled backend with forced rebuild
steps:
  # Build the production backend container with cache busting
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--no-cache'  # Force rebuild
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/cx-futurist/api-websocket:${BUILD_ID}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/cx-futurist/api-websocket:latest'
      - '-f'
      - 'Dockerfile.production'
      - '.'
    id: 'build-backend'

  # Push the backend container
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '--all-tags', '${_REGION}-docker.pkg.dev/$PROJECT_ID/cx-futurist/api-websocket']
    id: 'push-backend'
    waitFor: ['build-backend']

  # Deploy backend to Cloud Run with new service name to ensure fresh deployment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'cx-futurist-api-ws'  # New service name
      - '--image=${_REGION}-docker.pkg.dev/$PROJECT_ID/cx-futurist/api-websocket:${BUILD_ID}'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--port=8080'
      - '--allow-unauthenticated'
      - '--set-env-vars=API_HOST=0.0.0.0,OPENAI_API_KEY=${_OPENAI_KEY}'
      - '--cpu=1'
      - '--memory=1Gi'
      - '--timeout=300'
      - '--max-instances=10'
      - '--min-instances=1'
    id: 'deploy-backend'
    waitFor: ['push-backend']

  # Get backend URL and show it
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        BACKEND_URL=$(gcloud run services describe cx-futurist-api-ws --region=${_REGION} --format='value(status.url)')
        echo "‚úÖ WebSocket-enabled backend deployed successfully!"
        echo "üåê Backend URL: $${BACKEND_URL}"
        echo "üîå WebSocket URL: $${BACKEND_URL/https/wss}/ws"
        echo "üîå Alternative WebSocket: $${BACKEND_URL/https/wss}/simple-ws"
        echo ""
        echo "Test with:"
        echo "  curl $${BACKEND_URL}/health"
        echo "  curl $${BACKEND_URL}/api/status"
    waitFor: ['deploy-backend']

options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: '50'
  dynamic_substitutions: true

timeout: '900s'  # 15 minutes

substitutions:
  _REGION: 'us-central1'
  _OPENAI_KEY: ''  # Will be set via command line