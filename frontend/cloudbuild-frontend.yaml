steps:
  # Step 1: Get backend service URL
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'get-backend-url'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$(gcloud run services describe cx-futurist-backend \
          --region=us-central1 \
          --format='value(status.url)' 2>/dev/null || echo "https://cx-futurist-backend-placeholder.a.run.app")
        echo "Backend URL: $$BACKEND_URL"
        echo $$BACKEND_URL > /workspace/backend_url.txt
        # Convert https to wss for WebSocket
        WEBSOCKET_URL=$$(echo $$BACKEND_URL | sed 's/https:/wss:/g')
        echo $$WEBSOCKET_URL > /workspace/websocket_url.txt

  # Step 2: Create entrypoint script
  - name: 'gcr.io/cloud-builders/docker'
    id: 'create-entrypoint'
    entrypoint: 'bash'
    dir: 'frontend'
    args:
      - '-c'
      - |
        cat > entrypoint.sh << 'EOF'
        #!/bin/sh
        set -e
        echo "Starting CX Futurist AI Frontend..."
        echo "API URL: $${NEXT_PUBLIC_API_URL}"
        echo "WebSocket URL: $${NEXT_PUBLIC_WEBSOCKET_URL}"
        exec node server.js
        EOF
        chmod +x entrypoint.sh
    waitFor: ['get-backend-url']

  # Step 3: Build the frontend container
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    args:
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/cx-futurist/frontend:${BUILD_ID}'
      - '-t'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/cx-futurist/frontend:latest'
      - '--build-arg'
      - 'NEXT_PUBLIC_API_URL=$(cat /workspace/backend_url.txt)'
      - '--build-arg'
      - 'NEXT_PUBLIC_WEBSOCKET_URL=$(cat /workspace/websocket_url.txt)'
      - '-f'
      - 'Dockerfile'
      - '.'
    dir: 'frontend'
    waitFor: ['create-entrypoint']

  # Step 4: Push the frontend container
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    args: ['push', '--all-tags', 'us-central1-docker.pkg.dev/$PROJECT_ID/cx-futurist/frontend']
    waitFor: ['build-frontend']

  # Step 5: Deploy frontend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$(cat /workspace/backend_url.txt)
        WEBSOCKET_URL=$(cat /workspace/websocket_url.txt)
        
        gcloud run deploy cx-futurist-frontend \
          --image=us-central1-docker.pkg.dev/$PROJECT_ID/cx-futurist/frontend:${BUILD_ID} \
          --platform=managed \
          --region=us-central1 \
          --allow-unauthenticated \
          --port=3000 \
          --memory=1Gi \
          --cpu=1 \
          --max-instances=10 \
          --min-instances=0 \
          --timeout=60 \
          --set-env-vars="NEXT_PUBLIC_API_URL=$${BACKEND_URL},NEXT_PUBLIC_WEBSOCKET_URL=$${WEBSOCKET_URL},NODE_ENV=production" \
          --service-account=cx-futurist-frontend@$PROJECT_ID.iam.gserviceaccount.com || \
        gcloud run deploy cx-futurist-frontend \
          --image=us-central1-docker.pkg.dev/$PROJECT_ID/cx-futurist/frontend:${BUILD_ID} \
          --platform=managed \
          --region=us-central1 \
          --allow-unauthenticated \
          --port=3000 \
          --memory=1Gi \
          --cpu=1 \
          --max-instances=10 \
          --min-instances=0 \
          --timeout=60 \
          --set-env-vars="NEXT_PUBLIC_API_URL=$${BACKEND_URL},NEXT_PUBLIC_WEBSOCKET_URL=$${WEBSOCKET_URL},NODE_ENV=production"
    waitFor: ['push-frontend']

  # Step 6: Verify deployment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'verify-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Waiting for service to be ready..."
        sleep 10
        FRONTEND_URL=$(gcloud run services describe cx-futurist-frontend \
          --region=us-central1 \
          --format='value(status.url)')
        echo "Frontend deployed to: $$FRONTEND_URL"
        
        # Test the frontend
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $$FRONTEND_URL || echo "000")
        if [ "$$HTTP_CODE" = "200" ]; then
          echo "Frontend is responding successfully!"
        else
          echo "Warning: Frontend returned HTTP code: $$HTTP_CODE"
        fi
    waitFor: ['deploy-frontend']

options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: '100'
  logging: CLOUD_LOGGING_ONLY

# Increased timeout for build and deployment
timeout: '2400s'  # 40 minutes