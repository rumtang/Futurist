# Cloud Run service configuration template
# Use with: gcloud run services replace service.yaml

apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: cx-futurist-api
  annotations:
    run.googleapis.com/ingress: all
    run.googleapis.com/ingress-status: all
spec:
  template:
    metadata:
      annotations:
        # Scaling
        autoscaling.knative.dev/minScale: "0"
        autoscaling.knative.dev/maxScale: "10"
        
        # Resource allocation
        run.googleapis.com/memory: "2Gi"
        run.googleapis.com/cpu: "2"
        
        # Startup configuration
        run.googleapis.com/startup-cpu-boost: "true"
        run.googleapis.com/execution-environment: gen2
        
        # Session affinity (optional)
        run.googleapis.com/session-affinity: "false"
        
    spec:
      serviceAccountName: cx-futurist-sa@PROJECT_ID.iam.gserviceaccount.com
      containerConcurrency: 100
      timeoutSeconds: 3600
      
      containers:
      - image: REGION-docker.pkg.dev/PROJECT_ID/cx-futurist/api:latest
        ports:
        - containerPort: 8080
          name: http1
        
        env:
        - name: API_HOST
          value: "0.0.0.0"
        - name: PORT
          value: "8080"
        - name: REDIS_HOST
          value: "redis://redis:6379"
        
        # Secrets from Secret Manager
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: openai-api-key
              key: latest
        - name: PINECONE_API_KEY
          valueFrom:
            secretKeyRef:
              name: pinecone-api-key
              key: latest
        - name: PINECONE_ENVIRONMENT
          valueFrom:
            secretKeyRef:
              name: pinecone-environment
              key: latest
        - name: TAVILY_API_KEY
          valueFrom:
            secretKeyRef:
              name: tavily-api-key
              key: latest
              
        resources:
          limits:
            memory: "2Gi"
            cpu: "2000m"
          requests:
            memory: "1Gi" 
            cpu: "1000m"
            
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
          
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 10

  traffic:
  - percent: 100
    latestRevision: true