# Optimized Cloud Build configuration for WebSocket support

steps:
  # Step 1: Build backend image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-f'
      - 'Dockerfile.backend'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/backend:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/backend:latest'
      - '.'
    id: 'build-backend'

  # Step 2: Push backend image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/backend'
    id: 'push-backend'
    waitFor: ['build-backend']

  # Step 3: Deploy backend with WebSocket support
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'cx-futurist-backend'
      - '--image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/backend:${SHORT_SHA}'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--port=8080'
      - '--timeout=3600'
      - '--memory=2Gi'
      - '--cpu=2'
      - '--max-instances=10'
      - '--min-instances=1'
      - '--session-affinity'
      - '--use-http2'
      - '--set-env-vars=API_HOST=0.0.0.0,PORT=8080,DEV_MODE=false,LOG_LEVEL=INFO'
    id: 'deploy-backend'
    waitFor: ['push-backend']

  # Step 4: Get backend URL for frontend
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$(gcloud run services describe cx-futurist-backend --region=${_REGION} --format="value(status.url)")
        echo "BACKEND_URL=$BACKEND_URL" > backend_url.env
        echo "Backend deployed at: $BACKEND_URL"
    id: 'get-backend-url'
    waitFor: ['deploy-backend']

  # Step 5: Build frontend with backend URL
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source backend_url.env
        cd frontend
        cat > .env.production.local <<EOF
        NEXT_PUBLIC_API_URL=$BACKEND_URL
        NEXT_PUBLIC_WEBSOCKET_URL=$BACKEND_URL
        EOF
        cd ..
        docker build \
          --build-arg NEXT_PUBLIC_API_URL=$BACKEND_URL \
          --build-arg NEXT_PUBLIC_WEBSOCKET_URL=$BACKEND_URL \
          -f frontend/Dockerfile \
          -t ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/frontend:${SHORT_SHA} \
          -t ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/frontend:latest \
          ./frontend
    id: 'build-frontend'
    waitFor: ['get-backend-url']

  # Step 6: Push frontend image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/frontend'
    id: 'push-frontend'
    waitFor: ['build-frontend']

  # Step 7: Deploy frontend
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source backend_url.env
        gcloud run deploy cx-futurist-frontend \
          --image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/frontend:${SHORT_SHA} \
          --region=${_REGION} \
          --platform=managed \
          --allow-unauthenticated \
          --port=3000 \
          --memory=1Gi \
          --cpu=1 \
          --max-instances=5 \
          --set-env-vars="NEXT_PUBLIC_API_URL=$BACKEND_URL,NEXT_PUBLIC_WEBSOCKET_URL=$BACKEND_URL"
    id: 'deploy-frontend'
    waitFor: ['push-frontend', 'get-backend-url']

# Substitutions
substitutions:
  _REGION: 'us-central1'
  _REPO_NAME: 'cx-futurist'

# Build configuration
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Timeout for the entire build
timeout: '1800s'